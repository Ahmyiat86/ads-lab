#include<iostream>
#include<string.h>
#include<stdlib.h>
using namespace std;
void computeLPSArray(char *pat, int M, int *lps);
void KMPSearch(char *pat, char *txt)
{
int M = strlen(pat);
int N = strlen(txt);
int *lps = (int *)malloc(sizeof(int)*M);
int j = 0; // index for pat[]
int i = 0; // index for txt[]
computeLPSArray(pat, M, lps);
while(i < N)
{
if(pat[j] == txt[i])
{
j++;
i++;
}
if (j == M)
{
cout<<"Found pattern at index"<< i-j<<endl;
j = lps[j-1];
}
else if(pat[j] != txt[i])
{
if(j != 0)
j = lps[j-1];
else
i++;
}
}
free(lps); // to avoid memory leak
}
void computeLPSArray(char *pat, int M, int *lps)
{
int len = 0;
int i;
lps[0] = 0;
i = 1;

ADVANCED DATA STRUCTURES LAB(2024-2025)MJCET

while(i < M)
{
if(pat[i] == pat[len])
{
len++;
lps[i] = len;
i++;
}
else if( len != 0 )
{
len = lps[len-1];
}
else if (len == 0)
{
lps[i] = 0;
i++;
}
}
}
int main()
{
char *txt = "ABABDABACDABABCABAB";
char *pat = "AB";
KMPSearch(pat, txt);
return 0;
}